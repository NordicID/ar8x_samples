<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>NUR MQTT example</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
	<!-- jquery -->
	<script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>
    
    <!-- bootstrap: Latest compiled and minified CSS -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

	<!-- bootstrap: Latest compiled and minified JavaScript -->
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

	<!-- MQTT -->
    <script src="mqttws31.js" type="text/javascript"></script>
    <script src="config.js" type="text/javascript"></script>

    <script type="text/javascript">
    var mqtt;
    var reconnectTimeout = 2000;
    
	// Tag view update timer
    var tagUpdateTimer = 0;

	// Control command timeout timer    
    var ctlTimer = 0;
    var lastCtlCmd = "";
    

    // Unique tag storage
    var tagStorage = {};

	// Connect to MQTT broker
    function MQTTconnect() {
		if (typeof path == "undefined") {
			path = '/';
		}
		mqtt = new Paho.MQTT.Client(
				host,
				port,
				path,
				"web_" + parseInt(Math.random() * 100, 10)
		);
        var options = {
            timeout: 3,
            useSSL: useTLS,
            cleanSession: cleansession,
            onSuccess: onConnect,
            onFailure: function (message) {
            	addEvent('Connection failed to ' + host + ':' + port + path);
            	console.log("Connection failed: " + message.errorMessage + "Retrying");
                setTimeout(MQTTconnect, reconnectTimeout);
            }
        };

        mqtt.onConnectionLost = onConnectionLost;
        mqtt.onMessageArrived = onMessageArrived;

        if (username != null) {
            options.userName = username;
            options.password = password;
        }
        console.log("Host="+ host + ", port=" + port + ", path=" + path + " TLS = " + useTLS + " username=" + username + " password=" + password);
        mqtt.connect(options);
    }

    function onConnect() {
        // Connection succeeded; subscribe to our topic
        mqtt.subscribe("/nur_java_mqtt/events", {qos: 0});
        addEvent('Connected to ' + host + ':' + port + path);
    }

    function onConnectionLost(response) {
    	// Connection lost, start reconnect
        setTimeout(MQTTconnect, reconnectTimeout);
        addEvent("connection lost: " + response.errorMessage);
    }

	// Called when MQTT message arrives
    function onMessageArrived(message) 
    {
    	// Clear ctl timeout and enable buttons
    	clearTimeout(ctlTimer);
    	$("input[type=button]").attr("disabled", false);
    	
    	// Create JSON object from message
		var obj = JSON.parse(message.payloadString);
		
        if (obj.type == "tags") {
        	// Received inventoried tags, loop through and add to unique tag storage
        	for (var i = 0; i < obj.tags.length; i++) {
			    var tag = obj.tags[i];
			 	if (tagStorage[tag] === undefined) {
			 		// New tag
			 		tagStorage[tag] = { count: 0, time: 0 };
			 	}
			 	// Update count and last seen time
			 	tagStorage[tag].count++;
			 	tagStorage[tag].time = Date.now();
			}			
		} else if (obj.type == "status") {
			// Received status notification
			addEvent(obj.msg);
			
			if (obj.msg == "running") {
				// Update tag view every 250ms
        		tagUpdateTimer = setInterval(updateTags, 250);
			} else {
				clearInterval(tagUpdateTimer);
			}
		}
    }
    
    // Add event to log
    function addEvent(msg)
    {
    	$('#eventrows').prepend('<tr><td>' + msg + '</td><td>'+new Date(Date.now())+'</td></tr>');
    }
    
    // Clear unique tag storage
    function clearTags()
    {
    	tagStorage = {};
    	updateTags();
    }
    
    // Update tag storage view, called every 250ms
    function updateTags()
    {
    	var html = "";
    	for (var key in tagStorage) {
 			var value = tagStorage[key];
 			var lastseen = Math.round((Date.now() - value.time)/1000); 			
 			var extraStyle = "";
 			if (lastseen > 5) 
 				extraStyle = "style=\"color:lightgray\"";
    		html += "<tr "+extraStyle+"><td>"+key+"</td><td>" + value.count + "</td><td>"+ lastseen +" secs ago</td></tr>";
		}
    	$('#tagrows').html(html);
    }

    // Called if no response within 1000ms from background service
    function ctlTimeoutOccured()
    {
    	$("input[type=button]").attr("disabled", false);
    	addEvent("No response from background service");
    	addEvent("Timeout occured for command " + lastCtlCmd);
    	alert("No response from background service\nTimeout occured for command " + lastCtlCmd);
    	clearInterval(tagUpdateTimer);
    }

	// Get background service status
	function getStatus()
	{
		// Start timeout timer
		lastCtlCmd = "getStatus()";
        $("input[type=button]").attr("disabled", true);
        ctlTimer = setTimeout(ctlTimeoutOccured, 1000);
		
		// Send message to background service
		var message = new Paho.MQTT.Message("status");
        message.destinationName = "/nur_java_mqtt/ctl";
        mqtt.send(message);        
	}

	function inventoryCtl(val)
	{
		// Start timeout timer
		lastCtlCmd = "inventoryCtl(" + val + ")";
        $("input[type=button]").attr("disabled", true);
        ctlTimer = setTimeout(ctlTimeoutOccured, 1000);
		
		// Send message to background service
		var message = new Paho.MQTT.Message(val);
        message.destinationName = "/nur_java_mqtt/ctl";
        mqtt.send(message);        
	}

    $(document).ready(function() {
    	// Connect to broker
        MQTTconnect();        
    });

    </script>
  </head>
  <body>
	<div class="container">
	<h1>NUR MQTT example</h1>
	<input type="button" class="btn btn-primary" onclick="getStatus()" value="Get current status"/>
	<input type="button" class="btn btn-primary" onclick="inventoryCtl('start')" value="Start inventory"/>
	<input type="button" class="btn btn-primary" onclick="inventoryCtl('stop')" value="Stop inventory"/>
	<input type="button" class="btn btn-primary" onclick="clearTags()" value="Clear tags"/>
	<br/>
	
	<div class="row" style="height:800px; overflow-y:auto">
        <div class="col-md-8">
        
          <table class="table" width="100%">
		    <thead>
		      <tr>
		        <th>EPC</th>
		        <th>Count</th>
		        <th>Last seen</th>
		      </tr>
		    </thead>
		    <tbody id="tagrows">
		      
		    </tbody>
		  </table>
        	
        </div>
        <div class="col-md-4">
        
          <table class="table" width="100%">
		    <thead>
		      <tr>
		        <th>Event</th>
		        <th>Time</th>
		      </tr>
		    </thead>
		    <tbody id="eventrows">
		    </tbody>
		  </table>
		  	
        </div>
      </div>
	
	</div>

  </body>
</html>
